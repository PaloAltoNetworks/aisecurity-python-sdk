# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from aisecurity.generated_openapi_client.models.ds_detail_result_object import DSDetailResultObject


class TestDSDetailResultObject(unittest.TestCase):
    """DSDetailResultObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DSDetailResultObject:
        """Test DSDetailResultObject
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DSDetailResultObject`
        """
        model = DSDetailResultObject()
        if include_optional:
            return DSDetailResultObject(
                urlf_report = [
                    aisecurity.generated_openapi_client.models.urlf_entry_object.UrlfEntryObject(
                        url = '',
                        risk_level = '',
                        action = '',
                        categories = [
                            ''
                            ], )
                    ],
                dlp_report = aisecurity.generated_openapi_client.models.dlp_report_object.DlpReportObject(
                    dlp_report_id = '',
                    dlp_profile_name = '',
                    dlp_profile_id = '',
                    dlp_profile_version = 56,
                    data_pattern_rule1_verdict = '',
                    data_pattern_rule2_verdict = '',
                    data_pattern_detection_offsets = [
                        aisecurity.generated_openapi_client.models.dlp_pattern_detections_object.DlpPatternDetectionsObject(
                            data_pattern_id = '',
                            version = 56,
                            name = '',
                            high_confidence_detections = [
                                [
                                    56
                                    ]
                                ],
                            medium_confidence_detections = [
                                [
                                    56
                                    ]
                                ],
                            low_confidence_detections = , )
                        ], ),
                dbs_report = [
                    aisecurity.generated_openapi_client.models.dbs_entry_object.DbsEntryObject(
                        sub_type = '',
                        verdict = '',
                        action = '', )
                    ],
                tc_report = aisecurity.generated_openapi_client.models.tc_report_object.TcReportObject(
                    confidence = '',
                    verdict = '', ),
                mc_report = aisecurity.generated_openapi_client.models.mc_report_object.McReportObject(
                    verdict = '',
                    code_analysis_by_type = [
                        aisecurity.generated_openapi_client.models.mc_entry_object.McEntryObject(
                            file_type = '',
                            code_sha256 = '', )
                        ],
                    all_code_blocks = [
                        ''
                        ], ),
                agent_report = aisecurity.generated_openapi_client.models.agent_report_object.AgentReportObject(
                    model_verdict = '',
                    agent_framework = '',
                    agent_patterns = [
                        aisecurity.generated_openapi_client.models.agent_entry_object.AgentEntryObject(
                            category_type = '',
                            verdict = '', )
                        ], ),
                topic_guardrails_report = aisecurity.generated_openapi_client.models.tg_report_object.TgReportObject(
                    allowed_topic_list = '',
                    blocked_topic_list = '',
                    allowed_topics = [
                        ''
                        ],
                    blocked_topics = [
                        ''
                        ], ),
                cg_report = aisecurity.generated_openapi_client.models.cg_report_object.CgReportObject(
                    status = '',
                    explanation = '',
                    category = '', )
            )
        else:
            return DSDetailResultObject(
        )
        """

    def testDSDetailResultObject(self):
        """Test DSDetailResultObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
