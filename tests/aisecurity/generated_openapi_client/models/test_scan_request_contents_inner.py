# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

from aisecurity.generated_openapi_client.models.scan_request_contents_inner import (
    ScanRequestContentsInner,
)


class TestScanRequestContentsInner(unittest.TestCase):
    """ScanRequestContentsInner unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScanRequestContentsInner:
        """Test ScanRequestContentsInner
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `ScanRequestContentsInner`

        if include_optional:
            return ScanRequestContentsInner(
                prompt="This is the initial prompt example.",
                response="This is the expected response to the provided prompt.",
                context="This is Test Content",
            )
        else:
            return ScanRequestContentsInner()

    def testScanRequestContentsInner(self):
        """Test ScanRequestContentsInner"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

        # Assertions for required-only instance
        self.assertIsInstance(inst_req_only, ScanRequestContentsInner)
        self.assertIsNone(inst_req_only.prompt)
        self.assertIsNone(inst_req_only.response)
        self.assertIsNone(inst_req_only.context)

        # Assertions for instance with optional fields
        self.assertIsInstance(inst_req_and_optional, ScanRequestContentsInner)
        self.assertEqual(inst_req_and_optional.prompt, "This is the initial prompt example.")
        self.assertEqual(
            inst_req_and_optional.response,
            "This is the expected response to the provided prompt.",
        )
        self.assertEqual(
            inst_req_and_optional.context,
            "This is Test Content",
        )

        # Additional assertions
        self.assertNotEqual(inst_req_only, inst_req_and_optional)
        self.assertEqual(inst_req_only, ScanRequestContentsInner())
        self.assertEqual(
            inst_req_and_optional,
            ScanRequestContentsInner(
                prompt="This is the initial prompt example.",
                response="This is the expected response to the provided prompt.",
                context="This is Test Content",
            ),
        )


if __name__ == "__main__":
    unittest.main()
