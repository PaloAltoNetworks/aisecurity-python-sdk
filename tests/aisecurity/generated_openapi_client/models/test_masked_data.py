# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

from aisecurity.generated_openapi_client.models.masked_data import MaskedData
from aisecurity.generated_openapi_client.models.pattern_detections import (
    PatternDetections,
)


class TestMaskedData(unittest.TestCase):
    """MaskedData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MaskedData:
        """Test MaskedData
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `MaskedData`

        if include_optional:
            return MaskedData(
                data="test_data",
                pattern_detections=[
                    PatternDetections(
                        pattern="test_pattern",
                        locations=[[56]],
                    )
                ],
            )
        else:
            return MaskedData()

    def testMaskedData(self):
        """Test MaskedData"""
        inst_req_only = self.make_instance(include_optional=False)
        self.assertIsInstance(inst_req_only, MaskedData)
        self.assertEqual(inst_req_only.data, None)
        self.assertEqual(inst_req_only.pattern_detections, None)

        inst_req_and_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(inst_req_and_optional, MaskedData)
        self.assertEqual(inst_req_and_optional.data, "test_data")
        self.assertIsInstance(inst_req_and_optional.pattern_detections, list)
        self.assertEqual(len(inst_req_and_optional.pattern_detections), 1)
        self.assertEqual(inst_req_and_optional.pattern_detections[0].pattern, "test_pattern")
        self.assertEqual(inst_req_and_optional.pattern_detections[0].locations[0][0], 56)


if __name__ == "__main__":
    unittest.main()
