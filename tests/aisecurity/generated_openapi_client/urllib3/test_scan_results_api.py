# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest
from datetime import datetime, timezone
from unittest.mock import Mock, patch

from aisecurity.generated_openapi_client import (
    PromptDetected,
    ResponseDetected,
    ScanIdResult,
    ScanResponse,
)
from aisecurity.generated_openapi_client.urllib3.api_client import ApiClient
from aisecurity.generated_openapi_client.urllib3.configuration import Configuration


class TestScanResultsApi(unittest.TestCase):
    """ScanResultsApi unit tests stubs"""

    @patch("aisecurity.generated_openapi_client.urllib3.api.scan_results_api.ScanResultsApi")
    def setUp(self, MockScanResultsApi) -> None:
        mock_api_client = Mock(spec=ApiClient)
        mock_configuration = Mock(spec=Configuration)
        mock_configuration.host = "https://mock.api.host"
        mock_api_client.configuration = mock_configuration

        # Create a mock for default_headers as a dictionary
        mock_api_client.default_headers = {"x-pan-token": "mock-api-key"}
        self.mock_scans_result_api = MockScanResultsApi.return_value
        self.mock_scans_result_api.api_client = mock_api_client

    def tearDown(self) -> None:
        pass

    def test_get_scan_results_by_scan_ids(self) -> None:
        """Test case for get_scan_results_by_scan_ids

        Retrieve Scan Results by ScanIDs
        """
        mock_scan_response = ScanResponse(
            report_id="REP123456789",
            scan_id="SCAN987654321",
            tr_id="TR123456",
            profile_id="PROF789",
            profile_name="Standard Security Profile",
            category="benign",
            action="allow",
            prompt_detected=PromptDetected(url_cats=True, dlp=False, injection=False),
            response_detected=ResponseDetected(url_cats=False, dlp=False),
            created_at=datetime.now(timezone.utc),
            completed_at=datetime.now(timezone.utc),
        )

        mock_scan_result_response = ScanIdResult(
            req_id=100,
            status="complete",
            scan_id="SCAN987654321",
            result=mock_scan_response,
        )

        mock_scan_result_response = [mock_scan_result_response]
        self.mock_scans_result_api.get_scan_results_by_scan_ids.return_value = mock_scan_result_response
        result = self.mock_scans_result_api.get_scan_results_by_scan_ids(scan_ids=["SCAN_ID_1234"])

        # Assert that the result is a list
        self.assertIsInstance(result, list)

        # Assert that the list contains exactly one item
        self.assertEqual(len(result), 1)

        # Get the first (and only) ScanIdResult object
        scan_id_result = result[0]

        # Assert that it's an instance of ScanIdResult
        self.assertIsInstance(scan_id_result, ScanIdResult)

        # Assert the values of ScanIdResult attributes
        self.assertEqual(scan_id_result.req_id, 100)
        self.assertEqual(scan_id_result.status, "complete")
        self.assertEqual(scan_id_result.scan_id, "SCAN987654321")

        # Assert that the result attribute is a ScanResponse
        self.assertIsInstance(scan_id_result.result, ScanResponse)

        # Assert values of ScanResponse attributes
        self.assertEqual(scan_id_result.result.report_id, "REP123456789")
        self.assertEqual(scan_id_result.result.profile_name, "Standard Security Profile")
        self.assertEqual(scan_id_result.result.category, "benign")
        self.assertEqual(scan_id_result.result.action, "allow")

        # Assert PromptDetected values
        self.assertTrue(scan_id_result.result.prompt_detected.url_cats)
        self.assertFalse(scan_id_result.result.prompt_detected.dlp)
        self.assertFalse(scan_id_result.result.prompt_detected.injection)

        # Assert ResponseDetected values
        self.assertFalse(scan_id_result.result.response_detected.url_cats)
        self.assertFalse(scan_id_result.result.response_detected.dlp)

        # Assert that created_at and completed_at are datetime objects
        self.assertIsInstance(scan_id_result.result.created_at, datetime)
        self.assertIsInstance(scan_id_result.result.completed_at, datetime)


if __name__ == "__main__":
    unittest.main()
