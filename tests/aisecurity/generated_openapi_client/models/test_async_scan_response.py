# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest
from datetime import datetime

from aisecurity.generated_openapi_client.models.async_scan_response import (
    AsyncScanResponse,
)


class TestAsyncScanResponse(unittest.TestCase):
    """AsyncScanResponse unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AsyncScanResponse:
        """Test AsyncScanResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `AsyncScanResponse`

        if include_optional:
            return AsyncScanResponse(
                received=datetime(2024, 11, 21, 20, 21, 11, 855863),
                scan_id="SCAN987654321",
                report_id="REP123456789",
            )
        else:
            return AsyncScanResponse(
                received=datetime(2024, 11, 21, 20, 21, 11, 855863),
                scan_id="1234",
            )

    def testAsyncScanResponse(self):
        """Test AsyncScanResponse"""
        async_scan_response = self.make_instance(include_optional=False)
        self.assertIsInstance(async_scan_response, AsyncScanResponse)
        self.assertEqual(async_scan_response.scan_id, "1234")
        self.assertEqual(async_scan_response.report_id, None)
        self.assertEqual(async_scan_response.received, datetime(2024, 11, 21, 20, 21, 11, 855863))
        async_scan_response_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(async_scan_response_optional, AsyncScanResponse)
        self.assertEqual(async_scan_response_optional.scan_id, "SCAN987654321")
        self.assertEqual(async_scan_response_optional.report_id, "REP123456789")
        self.assertEqual(
            async_scan_response_optional.received,
            datetime(2024, 11, 21, 20, 21, 11, 855863),
        )


if __name__ == "__main__":
    unittest.main()
