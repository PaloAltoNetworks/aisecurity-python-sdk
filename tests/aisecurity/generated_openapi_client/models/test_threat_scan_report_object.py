# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

from aisecurity.generated_openapi_client import (
    DetectionServiceResultObject,
    DlpReportObject,
    DSDetailResultObject,
    ThreatScanReportObject,
    UrlfEntryObject,
)


class TestThreatScanReportObject(unittest.TestCase):
    """ThreatScanReportObject unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ThreatScanReportObject:
        """Test ThreatScanReportObject
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `ThreatScanReportObject`
        mock_detection_service_objects = [
            DetectionServiceResultObject(
                data_type="prompt",
                detection_service="urlf",
                verdict="malicious",
                action="block",
                result_detail=DSDetailResultObject(
                    urlf_report=[
                        UrlfEntryObject(
                            url="http://malicious-example.com",
                            risk_level="high",
                            categories=["malware", "phishing"],
                        ),
                        UrlfEntryObject(
                            url="http://suspicious-site.com",
                            risk_level="medium",
                            categories=["suspicious"],
                        ),
                    ],
                    dlp_report=DlpReportObject(
                        dlp_report_id="DLP-123456",
                        dlp_profile_name="Sensitive Data Profile",
                        dlp_profile_id="PROF-789",
                        dlp_profile_version=2,
                        data_pattern_rule1_verdict="NOT MATCHED",
                        data_pattern_rule2_verdict="MATCHED",
                    ),
                ),
            )
        ]
        if include_optional:
            return ThreatScanReportObject(
                req_id=100,
                report_id="REPORT_ID_1234",
                scan_id="SCAN987654321",
                transaction_id="TRANSACTION_1234",
                detection_results=mock_detection_service_objects,
            )
        else:
            return ThreatScanReportObject()

    def testThreatScanReportObject(self):
        """Test ThreatScanReportObject"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)
        # Assertions for required-only instance
        self.assertIsInstance(inst_req_only, ThreatScanReportObject)
        self.assertIsNone(inst_req_only.req_id)
        self.assertIsNone(inst_req_only.report_id)
        self.assertIsNone(inst_req_only.scan_id)
        self.assertIsNone(inst_req_only.transaction_id)
        self.assertIsNone(inst_req_only.detection_results)

        # Assertions for instance with optional fields
        self.assertIsInstance(inst_req_and_optional, ThreatScanReportObject)
        self.assertEqual(inst_req_and_optional.req_id, 100)
        self.assertEqual(inst_req_and_optional.report_id, "REPORT_ID_1234")
        self.assertEqual(inst_req_and_optional.scan_id, "SCAN987654321")
        self.assertEqual(inst_req_and_optional.transaction_id, "TRANSACTION_1234")

        # Assertions for detection_results
        self.assertIsInstance(inst_req_and_optional.detection_results, list)
        self.assertEqual(len(inst_req_and_optional.detection_results), 1)

        detection_result = inst_req_and_optional.detection_results[0]
        self.assertIsInstance(detection_result, DetectionServiceResultObject)
        self.assertEqual(detection_result.data_type, "prompt")
        self.assertEqual(detection_result.detection_service, "urlf")
        self.assertEqual(detection_result.verdict, "malicious")
        self.assertEqual(detection_result.action, "block")

        # Assertions for result_detail
        result_detail = detection_result.result_detail
        self.assertIsInstance(result_detail, DSDetailResultObject)

        # Assertions for urlf_report
        self.assertEqual(len(result_detail.urlf_report), 2)
        self.assertEqual(result_detail.urlf_report[0].url, "http://malicious-example.com")
        self.assertEqual(result_detail.urlf_report[0].risk_level, "high")
        self.assertEqual(result_detail.urlf_report[0].categories, ["malware", "phishing"])

        # Assertions for dlp_report
        self.assertEqual(result_detail.dlp_report.dlp_report_id, "DLP-123456")
        self.assertEqual(result_detail.dlp_report.dlp_profile_name, "Sensitive Data Profile")
        self.assertEqual(result_detail.dlp_report.dlp_profile_id, "PROF-789")
        self.assertEqual(result_detail.dlp_report.dlp_profile_version, 2)
        self.assertEqual(result_detail.dlp_report.data_pattern_rule1_verdict, "NOT MATCHED")
        self.assertEqual(result_detail.dlp_report.data_pattern_rule2_verdict, "MATCHED")

        # Additional assertions
        self.assertNotEqual(inst_req_only, inst_req_and_optional)
        self.assertEqual(inst_req_only, ThreatScanReportObject())


if __name__ == "__main__":
    unittest.main()
