# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest
from unittest.mock import Mock, patch

from aisecurity.generated_openapi_client import (
    DetectionServiceResultObject,
    DlpReportObject,
    DSDetailResultObject,
    ThreatScanReportObject,
    UrlfEntryObject,
)
from aisecurity.generated_openapi_client.urllib3.api_client import ApiClient
from aisecurity.generated_openapi_client.urllib3.configuration import Configuration


class TestScanReportsApi(unittest.TestCase):
    """ScanReportsApi unit tests stubs"""

    @patch("aisecurity.generated_openapi_client.urllib3.api.scan_reports_api.ScanReportsApi")
    def setUp(self, MockScanReportsApi) -> None:
        mock_api_client = Mock(spec=ApiClient)
        mock_configuration = Mock(spec=Configuration)
        mock_configuration.host = "https://mock.api.host"
        mock_api_client.configuration = mock_configuration

        # Create a mock for default_headers as a dictionary
        mock_api_client.default_headers = {"x-pan-token": "mock-api-key"}
        self.mock_scans_reports_api = MockScanReportsApi.return_value
        self.mock_scans_reports_api.api_client = mock_api_client

    def tearDown(self) -> None:
        pass

    def test_get_threat_scan_reports(self) -> None:
        """Test case for get_threat_scan_reports

        Retrieve Threat Scan Reports by Report IDs
        """
        mock_detection_service_objects = [
            DetectionServiceResultObject(
                data_type="prompt",
                detection_service="urlf",
                verdict="malicious",
                action="block",
                result_detail=DSDetailResultObject(
                    urlf_report=[
                        UrlfEntryObject(
                            url="http://malicious-example.com",
                            risk_level="high",
                            categories=["malware", "phishing"],
                        ),
                        UrlfEntryObject(
                            url="http://suspicious-site.com",
                            risk_level="medium",
                            categories=["suspicious"],
                        ),
                    ],
                    dlp_report=DlpReportObject(
                        dlp_report_id="DLP-123456",
                        dlp_profile_name="Sensitive Data Profile",
                        dlp_profile_id="PROF-789",
                        dlp_profile_version=2,
                        data_pattern_rule1_verdict="NOT MATCHED",
                        data_pattern_rule2_verdict="MATCHED",
                    ),
                ),
            )
        ]

        mock_threat_scan_report = ThreatScanReportObject(
            req_id=100,
            report_id="REPORT_ID_1234",
            scan_id="SCAN987654321",
            transaction_id="TRANSACTION_1234",
            detection_results=mock_detection_service_objects,
        )

        self.mock_scans_reports_api.get_threat_scan_reports.return_value = [mock_threat_scan_report]

        result = self.mock_scans_reports_api.get_threat_scan_reports(report_ids=["REPORT_ID_1234"])

        self.assertIsInstance(result, list)
        self.assertEqual(len(result), 1)

        report = result[0]
        self.assertIsInstance(report, ThreatScanReportObject)

        # Assert ThreatScanReportObject attributes
        self.assertEqual(report.report_id, "REPORT_ID_1234")
        self.assertEqual(report.scan_id, "SCAN987654321")
        self.assertEqual(report.req_id, 100)
        self.assertEqual(report.transaction_id, "TRANSACTION_1234")
        # Assert detection_results
        self.assertIsInstance(report.detection_results, list)
        self.assertEqual(len(report.detection_results), 1)

        detection = report.detection_results[0]
        self.assertIsInstance(detection, DetectionServiceResultObject)
        self.assertEqual(detection.data_type, "prompt")
        self.assertEqual(detection.detection_service, "urlf")
        self.assertEqual(detection.verdict, "malicious")
        self.assertEqual(detection.action, "block")

        # Assert DSDetailResultObject
        detail = detection.result_detail
        self.assertIsInstance(detail, DSDetailResultObject)

        # Assert UrlfReport
        self.assertIsInstance(detail.urlf_report, list)
        self.assertEqual(len(detail.urlf_report), 2)

        urlf_entry1 = detail.urlf_report[0]
        self.assertEqual(urlf_entry1.url, "http://malicious-example.com")
        self.assertEqual(urlf_entry1.risk_level, "high")
        self.assertEqual(urlf_entry1.categories, ["malware", "phishing"])

        urlf_entry2 = detail.urlf_report[1]
        self.assertEqual(urlf_entry2.url, "http://suspicious-site.com")
        self.assertEqual(urlf_entry2.risk_level, "medium")
        self.assertEqual(urlf_entry2.categories, ["suspicious"])

        # Assert DlpReport
        dlp_report = detail.dlp_report
        self.assertIsInstance(dlp_report, DlpReportObject)
        self.assertEqual(dlp_report.dlp_report_id, "DLP-123456")
        self.assertEqual(dlp_report.dlp_profile_name, "Sensitive Data Profile")
        self.assertEqual(dlp_report.dlp_profile_id, "PROF-789")
        self.assertEqual(dlp_report.dlp_profile_version, 2)
        self.assertEqual(dlp_report.data_pattern_rule1_verdict, "NOT MATCHED")
        self.assertEqual(dlp_report.data_pattern_rule2_verdict, "MATCHED")


if __name__ == "__main__":
    unittest.main()
