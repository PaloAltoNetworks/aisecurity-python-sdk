# coding: utf-8
"""
AISec API service
OpenAPI Specification for the AI Runtime Security API service
The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)
Do not edit the class manually.
"""  # noqa: E501

import unittest
from aisecurity.generated_openapi_client.models.response_detection_details import ResponseDetectionDetails
from aisecurity.generated_openapi_client.models.topic_guard_rails import TopicGuardRails


class TestResponseDetectionDetails(unittest.TestCase):
    """ResponseDetectionDetails unit test stubs"""

    def make_instance(self, include_optional) -> ResponseDetectionDetails:
        """Test ResponseDetectionDetails
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""

        if include_optional:
            return ResponseDetectionDetails(
                topic_guardrails_details=TopicGuardRails(
                    allowed_topics=["health", "finance", "general_knowledge"],
                    blocked_topics=["harmful_content", "personal_data"],
                )
            )
        else:
            return ResponseDetectionDetails()

    def testResponseDetectionDetails(self):
        """Test ResponseDetectionDetails"""
        # Test required only
        inst_req_only = self.make_instance(include_optional=False)
        self.assertIsInstance(inst_req_only, ResponseDetectionDetails)

        # Test required and optional
        inst_req_and_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(inst_req_and_optional, ResponseDetectionDetails)
        self.assertIsInstance(inst_req_and_optional.topic_guardrails_details, TopicGuardRails)
        self.assertEqual(len(inst_req_and_optional.topic_guardrails_details.allowed_topics), 3)
        self.assertIn("health", inst_req_and_optional.topic_guardrails_details.allowed_topics)
        self.assertEqual(len(inst_req_and_optional.topic_guardrails_details.blocked_topics), 2)
        self.assertIn("harmful_content", inst_req_and_optional.topic_guardrails_details.blocked_topics)


if __name__ == "__main__":
    unittest.main()
