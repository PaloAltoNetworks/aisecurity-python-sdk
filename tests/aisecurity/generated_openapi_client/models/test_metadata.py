# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

from aisecurity.generated_openapi_client.models.metadata import Metadata


class TestMetadata(unittest.TestCase):
    """Metadata unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Metadata:
        """Test Metadata
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `Metadata`
        if include_optional:
            return Metadata(
                app_name="aisec_app", app_user="ai runtime security", ai_model="sec_model_v1", user_ip="100.100.100.100"
            )
        else:
            return Metadata()

    def testMetadata(self):
        """Test Metadata"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

        self.assertIsInstance(inst_req_only, Metadata)
        self.assertIsNone(inst_req_only.app_name)
        self.assertIsNone(inst_req_only.app_user)
        self.assertIsNone(inst_req_only.ai_model)
        self.assertIsNone(inst_req_only.user_ip)

        # Assertions for instance with optional fields
        self.assertIsInstance(inst_req_and_optional, Metadata)
        self.assertEqual(inst_req_and_optional.app_name, "aisec_app")
        self.assertEqual(inst_req_and_optional.app_user, "ai runtime security")
        self.assertEqual(inst_req_and_optional.ai_model, "sec_model_v1")
        self.assertEqual(inst_req_and_optional.user_ip, "100.100.100.100")

        # Additional assertions
        self.assertNotEqual(inst_req_only, inst_req_and_optional)
        self.assertEqual(inst_req_only, Metadata())
        self.assertEqual(
            inst_req_and_optional,
            Metadata(
                app_name="aisec_app", app_user="ai runtime security", ai_model="sec_model_v1", user_ip="100.100.100.100"
            ),
        )


if __name__ == "__main__":
    unittest.main()
