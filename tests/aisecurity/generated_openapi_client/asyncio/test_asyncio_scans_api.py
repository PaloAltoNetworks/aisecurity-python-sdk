# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import asyncio
import unittest
from datetime import datetime, timezone
from unittest.mock import AsyncMock, patch

import aisecurity
from aisecurity.generated_openapi_client import (
    AsyncScanObject,
    AsyncScanResponse,
    PromptDetected,
    ResponseDetected,
    ScanRequest,
    ScanResponse,
)
from aisecurity.generated_openapi_client.asyncio.api_client import ApiClient
from aisecurity.generated_openapi_client.asyncio.configuration import Configuration


class TestScansApi(unittest.IsolatedAsyncioTestCase):
    """ScansApi unit tests stubs"""

    @patch(
        "aisecurity.generated_openapi_client.asyncio.api.scans_api.ScansApi",
        new_callable=AsyncMock,
    )
    async def asyncSetUp(self, MockScansApi) -> None:
        mock_api_client = AsyncMock(spec=ApiClient)

        # Create a Configuration mock and set its host
        mock_configuration = AsyncMock(spec=Configuration)
        mock_configuration.host = "https://mock.api.host"
        mock_api_client.configuration = mock_configuration

        # Create a mock for default_headers as a dictionary
        mock_api_client.default_headers = {"x-pan-token": "mock-api-key"}

        # Set up the mock ScansApi
        self.mock_scans_api = MockScansApi.return_value
        self.mock_scans_api.api_client = mock_api_client

    async def asyncTearDown(self) -> None:
        await self.mock_scans_api.api_client.close()
        await self.mock_scans_api.close()

    async def test_scan_sync_request_concurrent(self) -> None:
        """Test case for scan_sync_request with concurrent tasks"""

        def create_mock_scan_request(tr_id):
            return ScanRequest(
                tr_id=tr_id,
                ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                    profile_id="PROFILE001",
                ),
                contents=[
                    aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                        prompt=f"This is a mock tests prompt for {tr_id} with example.com url",
                        response=f"This is a mock tests response for {tr_id}",
                    )
                ],
            )

        def create_mock_scan_response(tr_id, report_id, scan_id):
            return ScanResponse(
                report_id=report_id,
                scan_id=scan_id,
                tr_id=tr_id,
                profile_id="PROF789",
                profile_name="Standard Security Profile",
                category="benign",
                action="allow",
                prompt_detected=PromptDetected(url_cats=True, dlp=False, injection=False),
                response_detected=ResponseDetected(url_cats=False, dlp=False),
                created_at=datetime.now(timezone.utc),
                completed_at=datetime.now(timezone.utc),
            )

        mock_responses = [
            create_mock_scan_response("TR123456", "REP123456789", "SCAN987654321"),
            create_mock_scan_response("TR123457", "REP1234567810", "SCAN987654322"),
            create_mock_scan_response("TR123458", "REP1234567811", "SCAN987654323"),
        ]

        self.mock_scans_api.scan_sync_request.side_effect = mock_responses

        async def run_scan_sync(tr_id):
            mock_request = create_mock_scan_request(tr_id)
            return await self.mock_scans_api.scan_sync_request(scan_request=mock_request)

        tr_ids = ["TR123456", "TR123457", "TR123458"]
        results = await asyncio.gather(*[run_scan_sync(tr_id) for tr_id in tr_ids])

        self.assertEqual(len(results), 3)

        result_map = {result.tr_id: result for result in results}

        for tr_id in tr_ids:
            result = result_map[tr_id]
            self.assertIsNotNone(result)
            self.assertTrue(result.report_id.startswith("REP"))
            self.assertTrue(result.scan_id.startswith("SCAN"))
            self.assertEqual(result.tr_id, tr_id)
            self.assertEqual(result.profile_id, "PROF789")
            self.assertEqual(result.category, "benign")
            self.assertEqual(result.action, "allow")
            self.assertTrue(result.prompt_detected.url_cats)
            self.assertFalse(result.prompt_detected.dlp)
            self.assertFalse(result.prompt_detected.injection)

    async def test_scan_async_request_concurrent(self) -> None:
        """Test case for scan_async_request with concurrent tasks"""

        def create_mock_async_scan_object(req_id, tr_id):
            return AsyncScanObject(
                req_id=req_id,
                scan_req=aisecurity.generated_openapi_client.models.scan_request.ScanRequest(
                    tr_id=tr_id,
                    ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                        profile_id="PROFILE001",
                    ),
                    contents=[
                        aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                            prompt=f"This is a mock tests prompt for {tr_id} with google.com url",
                            response=f"This is a mock tests response for {tr_id}",
                        )
                    ],
                ),
            )

        def create_mock_async_scan_response(scan_id, report_id):
            return AsyncScanResponse(
                received=datetime.now(timezone.utc),
                scan_id=scan_id,
                report_id=report_id,
            )

        mock_responses = [
            create_mock_async_scan_response("SCAN987654321", "REP123456789"),
            create_mock_async_scan_response("SCAN987654322", "REP1234567810"),
            create_mock_async_scan_response("SCAN987654323", "REP1234567811"),
        ]

        self.mock_scans_api.scan_async_request.side_effect = mock_responses

        async def run_scan_async(req_id, tr_id):
            mock_async_scan_object = create_mock_async_scan_object(req_id, tr_id)
            return await self.mock_scans_api.scan_async_request(async_scan_object=[mock_async_scan_object])

        req_ids = [1234, 1235, 1236]
        tr_ids = ["TR123456", "TR123457", "TR123458"]
        results = await asyncio.gather(*[run_scan_async(req_id, tr_id) for req_id, tr_id in zip(req_ids, tr_ids)])

        self.assertEqual(len(results), 3)

        expected_scan_ids = {"SCAN987654321", "SCAN987654322", "SCAN987654323"}
        expected_report_ids = {"REP123456789", "REP1234567810", "REP1234567811"}
        received_scan_ids = set()
        received_report_ids = set()

        for result in results:
            self.assertIsNotNone(result)
            self.assertTrue(result.scan_id.startswith("SCAN"))
            self.assertTrue(result.report_id.startswith("REP"))
            received_scan_ids.add(result.scan_id)
            received_report_ids.add(result.report_id)

        self.assertEqual(expected_scan_ids, received_scan_ids)
        self.assertEqual(expected_report_ids, received_report_ids)


if __name__ == "__main__":
    unittest.main()
