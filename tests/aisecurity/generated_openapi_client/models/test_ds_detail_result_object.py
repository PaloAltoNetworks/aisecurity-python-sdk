# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

from aisecurity.generated_openapi_client import (
    DlpReportObject,
    DSDetailResultObject,
    UrlfEntryObject,
)


class TestDSDetailResultObject(unittest.TestCase):
    """DSDetailResultObject unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DSDetailResultObject:
        """Test DSDetailResultObject
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `DSDetailResultObject`
        if include_optional:
            return DSDetailResultObject(
                urlf_report=[
                    UrlfEntryObject(
                        url="http://malicious-example.com",
                        risk_level="high",
                        categories=["malware", "phishing"],
                    ),
                    UrlfEntryObject(
                        url="http://suspicious-site.com",
                        risk_level="medium",
                        categories=["suspicious"],
                    ),
                ],
                dlp_report=DlpReportObject(
                    dlp_report_id="DLP-123456",
                    dlp_profile_name="Sensitive Data Profile",
                    dlp_profile_id="PROF-789",
                    dlp_profile_version=2,
                    data_pattern_rule1_verdict="NOT MATCHED",
                    data_pattern_rule2_verdict="MATCHED",
                ),
            )
        else:
            return DSDetailResultObject()

    def testDSDetailResultObject(self):
        """Test DSDetailResultObject"""
        detail_result_object = self.make_instance(include_optional=False)
        detail_result_object_optional = self.make_instance(include_optional=True)

        # Assertions for non-optional instance
        self.assertIsInstance(detail_result_object, DSDetailResultObject)
        self.assertIsNone(detail_result_object.urlf_report)
        self.assertIsNone(detail_result_object.dlp_report)

        # Assertions for optional instance
        self.assertIsInstance(detail_result_object_optional, DSDetailResultObject)

        # URLF report assertions
        self.assertIsInstance(detail_result_object_optional.urlf_report, list)
        self.assertEqual(len(detail_result_object_optional.urlf_report), 2)

        # First URLF entry
        self.assertEqual(
            detail_result_object_optional.urlf_report[0].url,
            "http://malicious-example.com",
        )
        self.assertEqual(detail_result_object_optional.urlf_report[0].risk_level, "high")
        self.assertEqual(
            detail_result_object_optional.urlf_report[0].categories,
            ["malware", "phishing"],
        )

        # Second URLF entry
        self.assertEqual(
            detail_result_object_optional.urlf_report[1].url,
            "http://suspicious-site.com",
        )
        self.assertEqual(detail_result_object_optional.urlf_report[1].risk_level, "medium")
        self.assertEqual(detail_result_object_optional.urlf_report[1].categories, ["suspicious"])

        # DLP report assertions
        self.assertIsInstance(detail_result_object_optional.dlp_report, DlpReportObject)
        self.assertEqual(detail_result_object_optional.dlp_report.dlp_report_id, "DLP-123456")
        self.assertEqual(
            detail_result_object_optional.dlp_report.dlp_profile_name,
            "Sensitive Data Profile",
        )
        self.assertEqual(detail_result_object_optional.dlp_report.dlp_profile_id, "PROF-789")
        self.assertEqual(detail_result_object_optional.dlp_report.dlp_profile_version, 2)
        self.assertEqual(
            detail_result_object_optional.dlp_report.data_pattern_rule1_verdict,
            "NOT MATCHED",
        )
        self.assertEqual(
            detail_result_object_optional.dlp_report.data_pattern_rule2_verdict,
            "MATCHED",
        )


if __name__ == "__main__":
    unittest.main()
