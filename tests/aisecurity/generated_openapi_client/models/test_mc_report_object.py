# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

from aisecurity.generated_openapi_client.models.mc_entry_object import McEntryObject
from aisecurity.generated_openapi_client.models.mc_report_object import McReportObject


class TestMcReportObject(unittest.TestCase):
    """McReportObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> McReportObject:
        """Test McReportObject
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `McReportObject`

        if include_optional:
            return McReportObject(
                verdict="test_verdict",
                code_info=[
                    McEntryObject(
                        file_type="test_file_type",
                        code_sha256="sha",
                    )
                ],
            )
        else:
            return McReportObject()

    def testMcReportObject(self):
        """Test McReportObject"""
        inst_req_only = self.make_instance(include_optional=False)
        self.assertIsInstance(inst_req_only, McReportObject)
        self.assertEqual(inst_req_only.verdict, None)
        self.assertEqual(inst_req_only.code_info, None)

        inst_req_and_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(inst_req_and_optional, McReportObject)
        self.assertEqual(inst_req_and_optional.verdict, "test_verdict")
        self.assertIsInstance(inst_req_and_optional.code_info, list)
        self.assertEqual(len(inst_req_and_optional.code_info), 1)
        self.assertEqual(inst_req_and_optional.code_info[0].file_type, "test_file_type")
        self.assertEqual(inst_req_and_optional.code_info[0].code_sha256, "sha")


if __name__ == "__main__":
    unittest.main()
