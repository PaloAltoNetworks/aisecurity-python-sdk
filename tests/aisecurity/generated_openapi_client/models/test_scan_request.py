# Copyright (c) 2025, Palo Alto Networks
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service
OpenAPI Specification for the AI Runtime Security API service
The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)
Do not edit the class manually.
"""  # noqa: E501

import unittest
from aisecurity.generated_openapi_client.models.scan_request import ScanRequest
from aisecurity.generated_openapi_client.models.ai_profile import AiProfile
from aisecurity.generated_openapi_client.models.scan_request_contents_inner import ScanRequestContentsInner
from aisecurity.exceptions import AISecSDKException
from aisecurity.constants.base import MAX_TRANSACTION_ID_STR_LENGTH, MAX_SESSION_ID_STR_LENGTH


class TestScanRequestIdCombinations(unittest.TestCase):
    """ScanRequest unit test stubs focusing on session_id and tr_id combinations"""

    def setUp(self):
        self.ai_profile = AiProfile(profile_id="test_profile_123", profile_name="Test Profile")
        self.contents = [
            ScanRequestContentsInner(prompt="What is the weather today?", response="The weather is sunny with 75Â°F")
        ]

    def test_valid_session_id_with_valid_tr_id(self):
        """Test Case 1: Valid session_id with valid tr_id - should use session_id priority"""
        scan_request = ScanRequest(
            session_id="valid_session_123", tr_id="valid_tr_456", ai_profile=self.ai_profile, contents=self.contents
        )
        self.assertEqual(scan_request.session_id, "valid_session_123")
        self.assertEqual(scan_request.tr_id, "valid_tr_456")

    def test_valid_session_id_with_invalid_tr_id_or_zero_length_tr_id(self):
        """Test Case 1: Valid session_id with valid tr_id - should use session_id priority"""
        scan_request = ScanRequest(
            session_id="valid_session_123", tr_id="", ai_profile=self.ai_profile, contents=self.contents
        )
        self.assertEqual(scan_request.session_id, "valid_session_123")
        self.assertEqual(scan_request.tr_id, "")

        tr_id = "t" * (MAX_TRANSACTION_ID_STR_LENGTH + 1)
        scan_request = ScanRequest(
            session_id="valid_session_123", tr_id=tr_id, ai_profile=self.ai_profile, contents=self.contents
        )
        self.assertEqual(scan_request.session_id, "valid_session_123")
        self.assertEqual(scan_request.tr_id, tr_id)

    def test_empty_id_with_valid_tr_id(self):
        """Test Case 2: Empty session_id with valid tr_id - should use tr_id"""
        scan_request = ScanRequest(
            session_id="", tr_id="valid_tr_456", ai_profile=self.ai_profile, contents=self.contents
        )
        self.assertEqual(scan_request.session_id, "")
        self.assertEqual(scan_request.tr_id, "valid_tr_456")

    def test_none_session_id_with_valid_tr_id(self):
        """Test Case 3: None session_id with valid tr_id - should use tr_id"""
        scan_request = ScanRequest(
            session_id=None, tr_id="valid_tr_456", ai_profile=self.ai_profile, contents=self.contents
        )
        self.assertIsNone(scan_request.session_id)
        self.assertEqual(scan_request.tr_id, "valid_tr_456")

    def test_valid_session_id_exceeds_max_length(self):
        """Test Case 4: session_id exceeds max length - should raise exception"""
        long_session_id = "x" * (MAX_SESSION_ID_STR_LENGTH + 1)

        with self.assertRaises(AISecSDKException) as context:
            ScanRequest(
                session_id=long_session_id, tr_id="valid_tr_456", ai_profile=self.ai_profile, contents=self.contents
            )
        self.assertIn(
            f"sessionID exceeds maximum length of {MAX_SESSION_ID_STR_LENGTH} characters", str(context.exception)
        )

    def test_empty_session_id_with_long_tr_id(self):
        """Test Case 5: Empty session_id with tr_id exceeding max length - should raise exception"""
        long_tr_id = "x" * (MAX_TRANSACTION_ID_STR_LENGTH + 1)

        with self.assertRaises(AISecSDKException) as context:
            ScanRequest(session_id="", tr_id=long_tr_id, ai_profile=self.ai_profile, contents=self.contents)
        self.assertIn(
            f"transactionID exceeds maximum length of {MAX_TRANSACTION_ID_STR_LENGTH} characters",
            str(context.exception),
        )

    def test_valid_session_id(self):
        """Test Case 1: Valid session_id with valid tr_id - should use session_id priority"""
        scan_request = ScanRequest(
            session_id=" " * 101, tr_id=" " * 101, ai_profile=self.ai_profile, contents=self.contents
        )
        self.assertIsInstance(scan_request, ScanRequest)
        self.assertEqual(scan_request.session_id, "")
        self.assertEqual(scan_request.tr_id.strip(), "")


if __name__ == "__main__":
    unittest.main()
