# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest
from datetime import datetime, timezone
from unittest.mock import Mock, patch

import aisecurity
from aisecurity.generated_openapi_client import (
    AsyncScanObject,
    AsyncScanResponse,
    PromptDetected,
    ResponseDetected,
    ScanRequest,
    ScanResponse,
)
from aisecurity.generated_openapi_client.urllib3.api_client import ApiClient
from aisecurity.generated_openapi_client.urllib3.configuration import Configuration


class TestScansApi(unittest.TestCase):
    """ScansApi unit tests stubs"""

    @patch("aisecurity.generated_openapi_client.urllib3.api.scans_api.ScansApi")
    def setUp(self, MockScansApi) -> None:
        mock_api_client = Mock(spec=ApiClient)

        # Create a Configuration mock and set its host
        mock_configuration = Mock(spec=Configuration)
        mock_configuration.host = "https://mock.api.host"
        mock_api_client.configuration = mock_configuration

        # Create a mock for default_headers as a dictionary
        mock_api_client.default_headers = {"x-pan-token": "mock-api-key"}

        # Set up the mock ScansApi
        self.mock_scans_api = MockScansApi.return_value
        self.mock_scans_api.api_client = mock_api_client

    def tearDown(self) -> None:
        pass

    def test_scan_sync_request(self) -> None:
        """Test case for scan_sync_request

        Send a Synchronous Scan Request
        """
        mock_scan_request = ScanRequest(
            tr_id="TR123456789",
            ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                profile_id="PROFILE001",
            ),
            contents=[
                aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                    prompt="This is a mock tests prompt with 72zf6.rxqfd.com/i8xps1 url",
                    response="This is a mock tests response",
                )
            ],
        )

        mock_scan_response = ScanResponse(
            report_id="REP123456789",
            scan_id="SCAN987654321",
            tr_id="TR123456",
            profile_id="PROF789",
            profile_name="Standard Security Profile",
            category="benign",
            action="allow",
            prompt_detected=PromptDetected(url_cats=True, dlp=False, injection=False),
            response_detected=ResponseDetected(url_cats=False, dlp=False),
            created_at=datetime.now(timezone.utc),
            completed_at=datetime.now(timezone.utc),
        )

        self.mock_scans_api.scan_sync_request = Mock(return_value=mock_scan_response)

        result = self.mock_scans_api.scan_sync_request(
            scan_request=mock_scan_request,
        )

        self.assertIsNotNone(result)
        self.assertEqual(result.report_id, "REP123456789")
        self.assertEqual(result.scan_id, "SCAN987654321")
        self.assertEqual(result.tr_id, "TR123456")
        self.assertEqual(result.profile_id, "PROF789")
        self.assertEqual(result.category, "benign")
        self.assertEqual(result.action, "allow")
        self.assertTrue(result.prompt_detected.url_cats)
        self.assertFalse(result.prompt_detected.dlp)
        self.assertFalse(result.prompt_detected.injection)

    def test_scan_async_request(self) -> None:
        """Test case for scan_sync_request

        Send a Synchronous Scan Request
        """
        mock_async_scan_object = AsyncScanObject(
            req_id=1234,
            scan_req=aisecurity.generated_openapi_client.models.scan_request.ScanRequest(
                tr_id="TR123456789",
                ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                    profile_id="PROFILE001",
                ),
                contents=[
                    aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                        prompt="This is a mock tests prompt with google.com url",
                        response="This is a mock tests response",
                    )
                ],
            ),
        )

        mock_async_scan_response = AsyncScanResponse(
            received=datetime.now(timezone.utc),
            scan_id="SCAN987654321",
            report_id="REP123456789",
        )

        self.mock_scans_api.scan_async_request = Mock(return_value=mock_async_scan_response)
        result = self.mock_scans_api.scan_async_request(
            async_scan_object=[mock_async_scan_object],
        )

        self.assertIsNotNone(result)
        self.assertEqual(result.report_id, "REP123456789")
        self.assertEqual(result.scan_id, "SCAN987654321")


if __name__ == "__main__":
    unittest.main()
