# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

from aisecurity.generated_openapi_client import (
    DetectionServiceResultObject,
    DlpReportObject,
    DSDetailResultObject,
    UrlfEntryObject,
)


class TestDetectionServiceResultObject(unittest.TestCase):
    """DetectionServiceResultObject unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DetectionServiceResultObject:
        """Test DetectionServiceResultObject
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `DetectionServiceResultObject`

        if include_optional:
            return DetectionServiceResultObject(
                data_type="prompt",
                detection_service="urlf",
                verdict="malicious",
                action="block",
                result_detail=DSDetailResultObject(
                    urlf_report=[
                        UrlfEntryObject(
                            url="http://malicious-example.com",
                            risk_level="high",
                            categories=["malware", "phishing"],
                        ),
                        UrlfEntryObject(
                            url="http://suspicious-site.com",
                            risk_level="medium",
                            categories=["suspicious"],
                        ),
                    ],
                    dlp_report=DlpReportObject(
                        dlp_report_id="DLP-123456",
                        dlp_profile_name="Sensitive Data Profile",
                        dlp_profile_id="PROF-789",
                        dlp_profile_version=2,
                        data_pattern_rule1_verdict="NOT MATCHED",
                        data_pattern_rule2_verdict="MATCHED",
                    ),
                ),
            )
        else:
            return DetectionServiceResultObject()

    def testDetectionServiceResultObject(self):
        """Test DetectionServiceResultObject"""
        detection_service_object = self.make_instance(include_optional=False)
        detection_service_object_optional = self.make_instance(include_optional=True)

        self.assertIsInstance(detection_service_object, DetectionServiceResultObject)
        self.assertIsNone(detection_service_object.data_type)
        self.assertIsNone(detection_service_object.detection_service)
        self.assertIsNone(detection_service_object.verdict)
        self.assertIsNone(detection_service_object.action)
        self.assertIsNone(detection_service_object.result_detail)

        # Assert statements for optional instance
        detection_service_object_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(detection_service_object_optional, DetectionServiceResultObject)
        self.assertEqual(detection_service_object_optional.data_type, "prompt")
        self.assertEqual(detection_service_object_optional.detection_service, "urlf")
        self.assertEqual(detection_service_object_optional.verdict, "malicious")
        self.assertEqual(detection_service_object_optional.action, "block")

        # Assert result_detail
        self.assertIsInstance(detection_service_object_optional.result_detail, DSDetailResultObject)

        # Assert urlf_report
        self.assertIsInstance(detection_service_object_optional.result_detail.urlf_report, list)
        self.assertEqual(len(detection_service_object_optional.result_detail.urlf_report), 2)
        self.assertIsInstance(
            detection_service_object_optional.result_detail.urlf_report[0],
            UrlfEntryObject,
        )
        self.assertEqual(
            detection_service_object_optional.result_detail.urlf_report[0].url,
            "http://malicious-example.com",
        )
        self.assertEqual(
            detection_service_object_optional.result_detail.urlf_report[0].risk_level,
            "high",
        )
        self.assertEqual(
            detection_service_object_optional.result_detail.urlf_report[0].categories,
            ["malware", "phishing"],
        )

        # Assert dlp_report
        self.assertIsInstance(detection_service_object_optional.result_detail.dlp_report, DlpReportObject)
        self.assertEqual(
            detection_service_object_optional.result_detail.dlp_report.dlp_report_id,
            "DLP-123456",
        )
        self.assertEqual(
            detection_service_object_optional.result_detail.dlp_report.dlp_profile_name,
            "Sensitive Data Profile",
        )
        self.assertEqual(
            detection_service_object_optional.result_detail.dlp_report.dlp_profile_id,
            "PROF-789",
        )
        self.assertEqual(
            detection_service_object_optional.result_detail.dlp_report.dlp_profile_version,
            2,
        )
        self.assertEqual(
            detection_service_object_optional.result_detail.dlp_report.data_pattern_rule1_verdict,
            "NOT MATCHED",
        )
        self.assertEqual(
            detection_service_object_optional.result_detail.dlp_report.data_pattern_rule2_verdict,
            "MATCHED",
        )


if __name__ == "__main__":
    unittest.main()
