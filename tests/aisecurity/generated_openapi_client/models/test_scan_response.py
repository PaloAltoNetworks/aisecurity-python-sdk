# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service
OpenAPI Specification for the AI Runtime Security API service
The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)
Do not edit the class manually.
"""  # noqa: E501

import unittest
import datetime
from aisecurity.generated_openapi_client.models.scan_response import ScanResponse
from aisecurity.generated_openapi_client.models.prompt_detected import PromptDetected
from aisecurity.generated_openapi_client.models.response_detected import ResponseDetected
from aisecurity.generated_openapi_client.models.masked_data import MaskedData
from aisecurity.generated_openapi_client.models.pattern_detections import PatternDetections
from aisecurity.generated_openapi_client.models.prompt_detection_details import PromptDetectionDetails
from aisecurity.generated_openapi_client.models.response_detection_details import ResponseDetectionDetails
from aisecurity.generated_openapi_client.models.topic_guard_rails import TopicGuardRails


class TestScanResponse(unittest.TestCase):
    """ScanResponse unit test stubs"""

    def make_instance(self, include_optional) -> ScanResponse:
        """Test ScanResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""

        if include_optional:
            return ScanResponse(
                report_id="report_123",
                scan_id="scan_456",
                tr_id="tr_789",
                profile_id="profile_001",
                profile_name="Security Profile",
                category="security_scan",
                action="block",
                prompt_detected=PromptDetected(
                    url_cats=True,
                    dlp=False,
                    injection=True,
                    toxic_content=False,
                    malicious_code=True,
                    agent=False,
                    topic_violation=True,
                ),
                response_detected=ResponseDetected(
                    url_cats=False,
                    dlp=True,
                    db_security=False,
                    toxic_content=True,
                    malicious_code=False,
                    agent=True,
                    ungrounded=False,
                    topic_violation=True,
                ),
                prompt_masked_data=MaskedData(
                    data="masked prompt data",
                    pattern_detections=[PatternDetections(pattern="email", locations=[[0, 20]])],
                ),
                response_masked_data=MaskedData(
                    data="masked response data",
                    pattern_detections=[PatternDetections(pattern="phone", locations=[[5, 15]])],
                ),
                prompt_detection_details=PromptDetectionDetails(
                    topic_guardrails_details=TopicGuardRails(allowed_topics=["technology"], blocked_topics=["violence"])
                ),
                response_detection_details=ResponseDetectionDetails(
                    topic_guardrails_details=TopicGuardRails(
                        allowed_topics=["health"], blocked_topics=["harmful_content"]
                    )
                ),
                created_at=datetime.datetime.strptime("2023-10-20 19:20:30.00", "%Y-%m-%d %H:%M:%S.%f"),
                completed_at=datetime.datetime.strptime("2023-10-20 19:25:30.00", "%Y-%m-%d %H:%M:%S.%f"),
            )
        else:
            return ScanResponse(report_id="report_123", scan_id="scan_456", category="security_scan", action="allow")

    def testScanResponse(self):
        """Test ScanResponse"""
        # Test required only
        inst_req_only = self.make_instance(include_optional=False)
        self.assertIsInstance(inst_req_only, ScanResponse)
        self.assertEqual(inst_req_only.report_id, "report_123")
        self.assertEqual(inst_req_only.category, "security_scan")
        self.assertEqual(inst_req_only.action, "allow")

        # Test required and optional
        inst_req_and_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(inst_req_and_optional, ScanResponse)
        self.assertEqual(inst_req_and_optional.report_id, "report_123")
        self.assertEqual(inst_req_and_optional.scan_id, "scan_456")
        self.assertEqual(inst_req_and_optional.profile_name, "Security Profile")
        self.assertEqual(inst_req_and_optional.action, "block")

        # Test nested objects
        self.assertIsInstance(inst_req_and_optional.prompt_detected, PromptDetected)
        self.assertTrue(inst_req_and_optional.prompt_detected.url_cats)
        self.assertTrue(inst_req_and_optional.prompt_detected.injection)

        self.assertIsInstance(inst_req_and_optional.response_detected, ResponseDetected)
        self.assertTrue(inst_req_and_optional.response_detected.dlp)
        self.assertTrue(inst_req_and_optional.response_detected.agent)

        # Test datetime fields
        self.assertIsInstance(inst_req_and_optional.created_at, datetime.datetime)
        self.assertIsInstance(inst_req_and_optional.completed_at, datetime.datetime)

        # Test detection details
        self.assertIsInstance(inst_req_and_optional.prompt_detection_details, PromptDetectionDetails)
        self.assertIsInstance(inst_req_and_optional.prompt_detection_details.topic_guardrails_details, TopicGuardRails)
        self.assertIn(
            "technology", inst_req_and_optional.prompt_detection_details.topic_guardrails_details.allowed_topics
        )
        self.assertIn(
            "violence", inst_req_and_optional.prompt_detection_details.topic_guardrails_details.blocked_topics
        )

        self.assertIsInstance(inst_req_and_optional.response_detection_details, ResponseDetectionDetails)
        self.assertIsInstance(
            inst_req_and_optional.response_detection_details.topic_guardrails_details, TopicGuardRails
        )
        self.assertIn(
            "health", inst_req_and_optional.response_detection_details.topic_guardrails_details.allowed_topics
        )
        self.assertIn(
            "harmful_content", inst_req_and_optional.response_detection_details.topic_guardrails_details.blocked_topics
        )


if __name__ == "__main__":
    unittest.main()
