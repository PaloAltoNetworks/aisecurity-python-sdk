# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

import aisecurity
from aisecurity.generated_openapi_client.models.scan_request import ScanRequest


class TestScanRequest(unittest.TestCase):
    """ScanRequest unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScanRequest:
        """Test ScanRequest
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `ScanRequest`
        if include_optional:
            return ScanRequest(
                tr_id="1234",
                ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                    profile_id="profile_123",
                    profile_name="Test Profile",
                ),
                metadata=aisecurity.generated_openapi_client.models.metadata.Metadata(
                    app_name="Google AI",
                    app_user="tests-user-1",
                    ai_model="Test AI model",
                    csp_vendor="",
                    csp_region="",
                ),
                contents=[
                    aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                        prompt="This is a tests prompt with 72zf6.rxqfd.com/i8xps1 url",
                        response="This is a tests response",
                    )
                ],
            )
        else:
            return ScanRequest(
                ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                    profile_id="profile_123",
                    profile_name="Test Profile",
                ),
                contents=[
                    aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                        prompt="This is a tests prompt with 72zf6.rxqfd.com/i8xps1 url",
                        response="This is a tests response",
                    )
                ],
            )

    def testScanRequest(self):
        """Test ScanRequest"""
        scan_request = self.make_instance(include_optional=True)
        self.assertIsInstance(scan_request, ScanRequest)
        self.assertEqual(scan_request.tr_id, "1234")
        ai_profile = aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
            profile_id="profile_123",
            profile_name="Test Profile",
        )
        self.assertEqual(scan_request.ai_profile, ai_profile)
        metadata = aisecurity.generated_openapi_client.models.metadata.Metadata(
            app_name="Google AI",
            app_user="tests-user-1",
            ai_model="Test AI model",
            csp_vendor="",
            csp_region="",
        )
        self.assertEqual(scan_request.metadata, metadata)
        self.assertEqual(len(scan_request.contents), 1)
        self.assertEqual(
            scan_request.contents[0].prompt,
            "This is a tests prompt with 72zf6.rxqfd.com/i8xps1 url",
        )
        self.assertEqual(scan_request.contents[0].response, "This is a tests response")
        scan_request_not_optional = self.make_instance(include_optional=False)
        self.assertIsInstance(scan_request_not_optional, ScanRequest)
        self.assertEqual(scan_request_not_optional.tr_id, None)
        self.assertEqual(scan_request_not_optional.ai_profile, ai_profile)
        self.assertEqual(len(scan_request_not_optional.contents), 1)
        self.assertEqual(scan_request_not_optional.metadata, None)
        self.assertEqual(
            scan_request_not_optional.contents[0].prompt,
            "This is a tests prompt with 72zf6.rxqfd.com/i8xps1 url",
        )
        self.assertEqual(scan_request_not_optional.contents[0].response, "This is a tests response")


if __name__ == "__main__":
    unittest.main()
