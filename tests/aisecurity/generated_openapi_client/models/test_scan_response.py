# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest
from datetime import datetime, timezone

from aisecurity.generated_openapi_client import (
    PromptDetected,
    ResponseDetected,
    ScanResponse,
)


class TestScanResponse(unittest.TestCase):
    """ScanResponse unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScanResponse:
        """Test ScanResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `ScanResponse`

        if include_optional:
            return ScanResponse(
                report_id="REP123456789",
                scan_id="SCAN987654321",
                tr_id="TR123456",
                profile_id="PROF789",
                profile_name="Standard Security Profile",
                category="benign",
                action="allow",
                prompt_detected=PromptDetected(url_cats=True, dlp=False, injection=False),
                response_detected=ResponseDetected(url_cats=False, dlp=False),
                created_at=datetime.now(timezone.utc),
                completed_at=datetime.now(timezone.utc),
            )
        else:
            return ScanResponse(
                report_id="REP12345678910",
                scan_id="SCAN9876543210",
                category="malign",
                action="block",
            )

    def testScanResponse(self):
        """Test ScanResponse"""
        scan_response = self.make_instance(include_optional=False)
        self.assertIsInstance(scan_response, ScanResponse)
        self.assertEqual(scan_response.report_id, "REP12345678910")
        self.assertEqual(scan_response.scan_id, "SCAN9876543210")
        self.assertEqual(scan_response.category, "malign")
        self.assertEqual(scan_response.action, "block")

        scan_response_with_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(scan_response_with_optional, ScanResponse)
        self.assertEqual(scan_response_with_optional.report_id, "REP123456789")
        self.assertEqual(scan_response_with_optional.scan_id, "SCAN987654321")
        self.assertEqual(scan_response_with_optional.category, "benign")
        self.assertEqual(scan_response_with_optional.action, "allow")
        self.assertEqual(scan_response_with_optional.tr_id, "TR123456")
        self.assertEqual(scan_response_with_optional.profile_id, "PROF789")
        prompt_detected = PromptDetected(url_cats=True, dlp=False, injection=False)
        response_detected = ResponseDetected(url_cats=False, dlp=False)
        self.assertEqual(scan_response_with_optional.prompt_detected, prompt_detected)
        self.assertEqual(scan_response_with_optional.response_detected, response_detected)


if __name__ == "__main__":
    unittest.main()
