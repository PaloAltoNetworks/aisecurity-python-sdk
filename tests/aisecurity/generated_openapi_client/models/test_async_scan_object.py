# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest

import aisecurity
from aisecurity.generated_openapi_client import AsyncScanObject, ScanRequest


class TestAsyncScanObject(unittest.TestCase):
    """AsyncScanObject unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AsyncScanObject:
        """Test AsyncScanObject
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `AsyncScanObject`

        if include_optional:
            return AsyncScanObject(
                req_id=12344,
                scan_req=aisecurity.generated_openapi_client.models.scan_request.ScanRequest(
                    tr_id="",
                    ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                        profile_id="",
                    ),
                    contents=[
                        aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                            prompt="",
                            response="",
                        )
                    ],
                ),
            )
        else:
            return AsyncScanObject(
                req_id=1234,
                scan_req=aisecurity.generated_openapi_client.models.scan_request.ScanRequest(
                    tr_id="TR123456789",
                    ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                        profile_id="PROFILE001",
                    ),
                    contents=[
                        aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                            prompt="This is a mock tests prompt with google.com url",
                            response="This is a mock tests response",
                        )
                    ],
                ),
            )

    def testAsyncScanObject(self):
        """Test AsyncScanObject"""
        async_scan_request_object = self.make_instance(include_optional=False)
        self.assertEqual(async_scan_request_object.req_id, 1234)
        scan_request = ScanRequest(
            tr_id="TR123456789",
            ai_profile=aisecurity.generated_openapi_client.models.ai_profile.AiProfile(
                profile_id="PROFILE001",
            ),
            contents=[
                aisecurity.generated_openapi_client.models.scan_request_contents_inner.ScanRequestContentsInner(
                    prompt="This is a mock tests prompt with google.com url",
                    response="This is a mock tests response",
                )
            ],
        )
        self.assertIsInstance(async_scan_request_object, AsyncScanObject)
        self.assertEqual(async_scan_request_object.scan_req.tr_id, scan_request.tr_id)
        self.assertEqual(async_scan_request_object.scan_req.ai_profile, scan_request.ai_profile)
        self.assertEqual(len(async_scan_request_object.scan_req.contents), len(scan_request.contents))
        self.assertEqual(
            async_scan_request_object.scan_req.contents[0].prompt,
            "This is a mock tests prompt with google.com url",
        )
        self.assertEqual(
            async_scan_request_object.scan_req.contents[0].response,
            "This is a mock tests response",
        )


if __name__ == "__main__":
    unittest.main()
