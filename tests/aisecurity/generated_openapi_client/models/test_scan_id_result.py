# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import unittest
from datetime import datetime

from aisecurity.generated_openapi_client import (
    PromptDetected,
    ResponseDetected,
    ScanIdResult,
    ScanResponse,
)


class TestScanIdResult(unittest.TestCase):
    """ScanIdResult unit tests stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScanIdResult:
        """Test ScanIdResult
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `ScanIdResult`
        if include_optional:
            return ScanIdResult(
                req_id=100,
                status="complete",
                scan_id="SCAN987654321",
                result=ScanResponse(
                    report_id="REP123456789",
                    scan_id="SCAN987654321",
                    tr_id="TR123456",
                    profile_id="PROF789",
                    profile_name="Standard Security Profile",
                    category="benign",
                    action="allow",
                    prompt_detected=PromptDetected(url_cats=True, dlp=False, injection=False),
                    response_detected=ResponseDetected(url_cats=False, dlp=False),
                    created_at=datetime(2024, 11, 21, 20, 21, 11, 855863),
                    completed_at=datetime(2024, 11, 21, 20, 21, 11, 855863),
                ),
            )
        else:
            return ScanIdResult()

    def testScanIdResult(self):
        """Test ScanIdResult"""
        scan_id_result = self.make_instance(include_optional=False)
        scan_id_result_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(scan_id_result, ScanIdResult)
        self.assertIsNone(scan_id_result.req_id)
        self.assertIsNone(scan_id_result.status)
        self.assertIsNone(scan_id_result.scan_id)
        self.assertIsNone(scan_id_result.result)

        # Assertions for optional instance
        self.assertIsInstance(scan_id_result_optional, ScanIdResult)
        self.assertEqual(scan_id_result_optional.req_id, 100)
        self.assertEqual(scan_id_result_optional.status, "complete")
        self.assertEqual(scan_id_result_optional.scan_id, "SCAN987654321")

        # Assertions for the nested ScanResponse
        self.assertIsInstance(scan_id_result_optional.result, ScanResponse)
        self.assertEqual(scan_id_result_optional.result.report_id, "REP123456789")
        self.assertEqual(scan_id_result_optional.result.scan_id, "SCAN987654321")
        self.assertEqual(scan_id_result_optional.result.tr_id, "TR123456")
        self.assertEqual(scan_id_result_optional.result.profile_id, "PROF789")
        self.assertEqual(scan_id_result_optional.result.profile_name, "Standard Security Profile")
        self.assertEqual(scan_id_result_optional.result.category, "benign")
        self.assertEqual(scan_id_result_optional.result.action, "allow")

        # Assertions for nested PromptDetected
        self.assertTrue(scan_id_result_optional.result.prompt_detected.url_cats)
        self.assertFalse(scan_id_result_optional.result.prompt_detected.dlp)
        self.assertFalse(scan_id_result_optional.result.prompt_detected.injection)

        # Assertions for nested ResponseDetected
        self.assertFalse(scan_id_result_optional.result.response_detected.url_cats)
        self.assertFalse(scan_id_result_optional.result.response_detected.dlp)

        # Assertions for datetime fields
        self.assertIsInstance(scan_id_result_optional.result.created_at, datetime)
        self.assertIsInstance(scan_id_result_optional.result.completed_at, datetime)


if __name__ == "__main__":
    unittest.main()
