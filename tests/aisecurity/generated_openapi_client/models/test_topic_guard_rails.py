# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service
OpenAPI Specification for the AI Runtime Security API service
The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)
Do not edit the class manually.
"""  # noqa: E501

import unittest
from aisecurity.generated_openapi_client.models.topic_guard_rails import TopicGuardRails


class TestTopicGuardRails(unittest.TestCase):
    """TopicGuardRails unit test stubs"""

    def make_instance(self, include_optional) -> TopicGuardRails:
        """Test TopicGuardRails
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""

        if include_optional:
            return TopicGuardRails(
                allowed_topics=["technology", "science", "education", "business"],
                blocked_topics=["violence", "hate_speech", "illegal_activities", "adult_content"],
            )
        else:
            return TopicGuardRails()

    def testTopicGuardRails(self):
        """Test TopicGuardRails"""
        # Test required only
        inst_req_only = self.make_instance(include_optional=False)
        self.assertIsInstance(inst_req_only, TopicGuardRails)

        # Test required and optional
        inst_req_and_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(inst_req_and_optional, TopicGuardRails)

        # Test allowed_topics
        self.assertEqual(len(inst_req_and_optional.allowed_topics), 4)
        self.assertIn("technology", inst_req_and_optional.allowed_topics)
        self.assertIn("science", inst_req_and_optional.allowed_topics)

        # Test blocked_topics
        self.assertEqual(len(inst_req_and_optional.blocked_topics), 4)
        self.assertIn("violence", inst_req_and_optional.blocked_topics)
        self.assertIn("hate_speech", inst_req_and_optional.blocked_topics)


if __name__ == "__main__":
    unittest.main()
